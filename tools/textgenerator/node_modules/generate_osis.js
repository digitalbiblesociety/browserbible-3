var fs = require('fs'),
	path = require('path'),
	bibleData = require('bible_data'),
	bibleFormatter = require('bible_formatter'),	
	verseIndexer = require('verse_indexer'),
	$ = require('jquery');
	
unparsedTags = [];

function generate(inputPath, outputPath, indexOutputPath, info, createIndex) {
	

	info.type = 'bible';
	info.divisions = [];
	info.divisionNames = [];
	info.sections = [];

	// read in OSIS, split into books
	var filepath = path.join(inputPath, info.filename),
		text = fs.readFileSync( filepath , 'utf8'),
		separator = '<div type="book"',
		chunks = text.split(separator),
		indexData = {},
		lemmaIndexOutputPath = indexOutputPath.replace('index','indexlemma');
		lemmaIndexData = {},
		singleBookIndex = -1;
		
	
	if (singleBookIndex > -1) {
		processBook( separator + chunks[singleBookIndex] , info, inputPath, outputPath, indexOutputPath, indexData, lemmaIndexOutputPath, lemmaIndexData, createIndex);		
	
	} else {
		// run through books
		for (var i=1; i<chunks.length; i++) {
			var bookXml = separator + chunks[i];
				
			processBook(bookXml, info, inputPath, outputPath, indexOutputPath, indexData, lemmaIndexOutputPath, lemmaIndexData, createIndex);		
		}
	}
	
	if (createIndex) {
		verseIndexer.createIndexFiles(indexOutputPath, indexData);
		
		if (!fs.existsSync(lemmaIndexOutputPath)) {
			fs.mkdirSync(lemmaIndexOutputPath);			
		}
		
		verseIndexer.createIndexFiles(lemmaIndexOutputPath, lemmaIndexData);
	}
		
	fs.writeFileSync(path.join(outputPath, 'info.json'), JSON.stringify(info), 'utf8');
}


function processBook(bookXml, info, inputPath, outputPath, indexOutputPath, indexData, lemmaIndexOutputPath, lemmaIndexData, createIndex) {

	var book = $(bookXml),
		bookOsisID = book.attr('osisID'),
		bookInfo = bibleData.getBookInfoByOsisCode(bookOsisID),
		dbsBookCode = bookInfo.dbsCode,
		bookName = bookInfo.names["eng"][0],
		chapters = book.find('chapter'),
		breakChar = '\n';
		
	info.divisions.push(dbsBookCode);
	info.divisionNames.push(bookName);	
	
	console.log(bookOsisID);
		
	//fs.writeFileSync( path.join(inputPath, bookOsisID + '.xml' ), bookXml);
		
	chapters.each(function(i, el) {
		var chapter = $(el),
			chapterOsisID = chapter.attr('osisID'),
			chapterNum = chapterOsisID.split('.')[1],
			dbsChapterCode = dbsBookCode + chapterNum,
			nextid = bibleData.getNextChapter(dbsChapterCode),
			previd = bibleData.getPrevChapter(dbsChapterCode),
			html = '',
			paragraphIsOpen = false,
			verseIsOpen = false,			
			wordsOfChristIsActive = false,
			verseText = '';
			
		function handleChildNodes(nodes) {
			for (var i=0, il=nodes.length; i<il; i++) {
				var node = nodes[i];
				
				//console.log(node.nodeType, node.nodeValue || node.nodeName);
				
				if (node.nodeType == 3) { // TEXT_NODE
					html += node.nodeValue;
					
					verseText += node.nodeValue;
				} else if (node.nodeType == 1) { // ELEMENT_NODE
				
					var tagName = node.nodeName.toLowerCase();
				
					switch (tagName) {
						case 'verse':

						
							//console.log( node.attributes[0] ? node.attributes[0].name + ':' + node.attributes[0].value : '' );
							//console.log( node.attributes[1] ? node.attributes[1].name + ':' + node.attributes[1].value : '');						
						
							if (node.attributes["sid"]) {
							
						
								var osisID = node.attributes["osisid"] ? node.attributes["osisid"].value : '',
									verseNum = osisID != '' ? osisID.split('.')[2] : '',
									dbsVerseCode = dbsChapterCode + '_' + verseNum;							
																				
								if (verseIsOpen) {
									html += '</span>' + breakChar;
									verseIsOpen = false;									
								}
								
								// new paragrap
								var nextNode = node.nextSibling;
								if (nextNode != null && nextNode.nodeType == 1 && nextNode.attributes["marker"] && nextNode.attributes["marker"].value == 'Â¶') {
									html += '</div>' + breakChar;
									paragraphIsOpen = false;
									html += '<div class="p">' + breakChar;									
									paragraphIsOpen = true;									
								}
								
							
								html += '<span class="v-num v-' + verseNum + '">' + verseNum + '</span>';
								html += '<span class="v ' + dbsVerseCode + '" data-id="' + dbsVerseCode + '">';
								
								
								
								verseIsOpen = true;	
								
								if (wordsOfChristIsActive) {
									html += '<span class="woc">';									
								}
								
								// reset for index
								verseText = '';
								
							} else {
								if (wordsOfChristIsActive) {
									html += '</span>';	
								}
								
								if (createIndex) {
									verseIndexer.indexVerse(indexOutputPath, dbsVerseCode, verseText, indexData, info.lang);
								}
							
							
								html += '</span>' + breakChar;
								verseIsOpen = false;								
							}
							
							break;
						case 'w':
							
							if (node.textContent != '') {
															
								var 
									morph = node.attributes['morph'] ? node.attributes['morph'].value : '',
									morphData = morph.replace(/robinson:/gi,''), // (morph.indexOf(':') > -1) ? morph.split(':')[1] : '',
									lemma = node.attributes['lemma'] ? node.attributes['lemma'].value : '',
									strongs = lemma.replace(/strong:/gi,''); //(lemma.indexOf(':') > -1) ? lemma.split(':')[1]: ''; // .replace('G','').replace('H','') : ''
									
								strongs = strongs.replace(/H0+/g, 'H').replace(/G0+/g, 'G');
									
								if (createIndex) {
									verseIndexer.indexStrongs(lemmaIndexOutputPath, dbsVerseCode, strongs, lemmaIndexData, info.lang);
								}
							
								html += '<l' + (strongs != '' ? ' s="' + strongs + '"' : '') + (morphData != '' ? ' m="' + morphData + '"' : '') + '>';										
								handleChildNodes(node.childNodes);			
								//html += node.textContent;
								html += '</l>';
								
								//verseText += node.textContent;
							}
						
							break;
							
						case 'transchange':
		
							if (node.attributes["type"] && node.attributes["type"].value == 'added') {
								html += '<span class="add">' + node.textContent + '</span>';								
								verseText += node.textContent;
							}
						
							break;	
							
						case 'q':
							
							if (node.attributes["who"] && node.attributes["who"].value == 'Jesus') {
								html += '<span class="woc">';
								wordsOfChristIsActive = true;
								
								handleChildNodes(node.childNodes);
								
								wordsOfChristIsActive = false;								
								html += '</span>';
								
							}
							
							break;
							
						case 'divinename':
							html += '<span class="yhwh">' + node.textContent + "</span>";
							verseText += node.textContent;
							
							break;
							
						case 'milestone':

							
							// handling paragraph breaks under 'verse'
							
							break;	
							
						case 'title':
							// book and chapters titles
							// ignore
							
							break;
						
						case 'inscription':
						case 'seg':
							handleChildNodes(node.childNodes);
	
							
						case 'note':
							
							if (node.attributes["type"] && node.attributes["type"].value == 'study') {
								html += '<span class="note"><span class="key">n</span><span class="text">' + node.textContent + "</span></span>";								
							}
							
							break;						
							
						default:
							if (unparsedTags.indexOf(tagName) == -1) {
								unparsedTags.push(tagName);
								console.log('MISSING:' + tagName);
								
							}
						
					}
					
				}
				
			}		
		}
						
			
		info.sections.push(dbsChapterCode);	
			
		html = 
				'<!DOCTYPE html>' + 
				'<html><head><meta charset="UTF-8" /><title>' + info.id + '</title></head>' + 
				'<body>' + 
				' <div id="nav"><span><a class="prev" href="' + previd + '.html">&#9664;</a><a class="home" href="../../../mobile.html#' + info.id + '">&#9776;</a><a class="next" href="' + nextid + '.html">&#9654;</a></span></div> ' +
		'<div class="chapter section ' + info.id + ' ' + dbsBookCode + ' ' + dbsChapterCode + ' ' + info.lang + '"' + 
					' data-textid="' + info.id + '"' + 
					' data-id="' + dbsChapterCode + '"' + 
					' data-previd="' + previd + '"' + 
					' data-nextid="' + nextid + '"' + 
					' lang="' + info.lang + '">' + breakChar;
		
		if (chapterNum == 1) {
			html += '<div class="mt">' + bookName + '</div>' + breakChar;
		}
		html += '<div class="c">' + (dbsBookCode == 'PS' && info.lang == 'eng' ? 'Psalm ' : '') + chapterNum + '</div>' + breakChar;
		html += '<div class="p">';
		paragraphIsOpen = true;
		
		handleChildNodes(el.childNodes);
		
		html += '</div>'; // p
		paragraphIsOpen = false;
		html += '</div>'; // c
		
		fs.writeFileSync( path.join(outputPath, dbsChapterCode + '.html'), html);
			
			
		//bookXmlconsole.log(dbsChapterCode, el.childNodes.length, chapter.children().length);
		
	});
	
	
	
	
	/*
	var doc = $(text);
	console.log('jqueried');
	
	var books = doc.find('div');
	console.log(books.length);	
	
	books.each(function() {
		
		console.log( $(this).attr('osisID'));
	});
	*/
}




module.exports = {
	generate: generate
}